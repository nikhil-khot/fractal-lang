#lang racket

(require 2htdp/universe)
(require 2htdp/image)

(define WIDTH 500)
(define HEIGHT 500)
(define MAX-ITER 100)
(define ZOOM 200.0)

;; The world state is represented as a list of lists where each element is the number of
;; Iterations it takes to escape, or the `MAX-ITER`

;;The updater for a mandelbrot fractal
(define mand-upd (λ (z c) (+ (* z z) c)))

;; The updater for a Burning Ship fractal
(define burn-upd (λ (z c) (+ (* (make-rectangular (abs (real-part z)) (abs (imag-part z))) 
                               (make-rectangular (abs (real-part z)) (abs (imag-part z)))) 
                            c)))

;; The updater for a Julia fractal
(define julia-upd (λ (k) (λ (z) (+ (* z z) k))))


;;Finds the number of steps it takes to escape to infinity given some updater
(define (steps-to-inf et-fractal-update x y)
  (letrec
      ([complex-posn (make-rectangular (/ (- x (/ WIDTH 2)) ZOOM)
                                        (/ (- y (/ HEIGHT 2)) ZOOM))]
       [stepper (λ (z iteration)
                  (if (or (>= iteration MAX-ITER) (> (magnitude z) 2))
                      iteration
                      (stepper (+ (* z z) complex-posn) (add1 iteration))))])
    (stepper 0+0i 0)))

; Maps iteration count to color
(define (simple-color)
  (λ (steps)
    (if (= steps MAX-ITER)
      (make-color 0 0 0)
      (make-color (min 255 (* 10 steps)) ;; 2/6
                  (min 255 (* 5 steps))  ;; 1/6
                  (min 255 (* 15 steps))))));3/6

;;Curried: returns a func that will take in the number of steps
(define (simple-color-ratio r-ratio g-ratio b-ratio)
  (if (> (+ r-ratio b-ratio g-ratio) 1)
      (error "The given ratios of red green and blue values is greater than 1!" r-ratio g-ratio b-ratio)
      (λ (steps)
        (let
            ([red (* steps (/ r-ratio 1/255))]
             [green (* steps (/ g-ratio 1/255))]
             [blue (* steps (/ b-ratio 1/255))])
          (if (= steps MAX-ITER)
              (make-color 0 0 0)
              (make-color (min 255 (ceiling red))
                          (min 255 (ceiling green))
                          (min 255 (ceiling blue))))))))

; Generates the image of the given fractal
(define (draw-fractal etf-updater color-func)
  (apply beside
         (for/list ([x (in-range WIDTH)])
           (displayln x)
           (apply above
                  (for/list ([y (in-range HEIGHT)])
                    (rectangle 1 1 "solid"
                               (color-func (steps-to-inf etf-updater x y))))))))

; Draw function for big-bang
(define (render _)
  (draw-fractal (julia-upd 2000+20000i)
                (simple-color-ratio 1/6 1/6 3/6)))

; Start the big-bang simulation
(define (BANG) (big-bang 0
  (on-draw render)))

(BANG)


